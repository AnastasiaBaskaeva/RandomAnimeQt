# Form implementation generated from reading ui file '.\SUPERrandomanime.ui'
#
# Created by: PyQt6 UI code generator 6.0.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import requests
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QUrl
from PyQt6.QtGui import QPixmap
from PyQt6.QtNetwork import QNetworkRequest, QNetworkAccessManager
import pickle
from PyQt6 import uic
from PyQt6.QtWidgets import QPushButton, QHBoxLayout, QLabel, QWidget, QListWidgetItem, QGroupBox, QListWidget, QDialog, \
    QMainWindow, QVBoxLayout

showFavAnime = ""

class Window(QDialog):
    def __init__(self,father):
        super().__init__(father)
        self.father = father


        self.resize(730, 509)
        self.setWindowTitle("Favourites")

        self.centralwidgetHorizontalLayout = QHBoxLayout(self)

        self.Frame = QGroupBox()
        self.FrameHorizontalLayout = QVBoxLayout(self.Frame)

        self.ListWidget = QListWidget(self.Frame)
        self.ListWidget.setSpacing(11)
        self.ListWidget.setStyleSheet(
            "QListWidget { background: palette(window); border: none;}"
            "QListWidget::item {"
                "border-style: solid;" 
                "border-width:1px;" 
                "border-color:  black;"
                "margin-right: 30px;"
            "}"
            "QListWidget::item:hover {"
                "border-color: black;"
            "}")
        self.clearbutton = QtWidgets.QPushButton(self)
        self.clearbutton.setGeometry(QtCore.QRect(50, 100, 0, 469))
        self.clearbutton.setText("Очистить")
        self.clearbutton.clicked.connect(self.clear)

        self.FrameHorizontalLayout.addWidget(self.ListWidget)
        self.FrameHorizontalLayout.addWidget(self.clearbutton)
        self.centralwidgetHorizontalLayout.addWidget(self.Frame)


        self.showFavourite()


    def clicked(self):
        sender = self.sender()
        self.showFavouriteinWindow(sender.objectName())


    def clear(self):
        with open('favourite.txt', 'wb') as f:
            pass
        f.close()
        self.ListWidget.clear()

    def showFavouriteinWindow(self, currentAnime):
        info = currentAnime.split()
        title = ''
        year = ''
        for item in info:
            try:
                int(item)
                if len(item) <4:
                    raise
                year += item
                break
            except:
                title += item + ' '

        title = title.rstrip()

        for anime in self.father.favouriteS:

            if anime['title'] == title and anime['year'] == int(year):

                self.father.label_title.setText(anime['title'])
                self.father.label_year.setText(str(anime['year']))
                self.father.label_genre.setText(
                    str(anime['material_data']['all_genres'][0:3]).replace("[", "").replace("]", "").replace("'",""))
                self.father.label_count.setText(str(anime['material_data']['episodes_total']))
                self.father.label_va.setText(anime['translate'])
                self.father.label_story.setText(anime['material_data']['description'])

                urlImg = anime['material_data']["poster_url"]
                self.father.senderFavor.get(QNetworkRequest(QUrl(urlImg)))
                self.close()

    def showFavourite(self):
        with open('favourite.txt', 'rb') as h:
            try:
                self.favouriteS = pickle.loads(h.read())
                for i in self.favouriteS:
                    item = QListWidgetItem()
                    item_widget = QWidget()
                    line_text = QLabel(i['title'] + ' ' + str(i['year']) + ' ' + str(i['material_data']['all_genres'][0:3]).replace(
                            "[", "").replace("]", "").replace("'", ""))
                    line_push_button = QPushButton("Показать")
                    line_push_button.setFixedSize(100,30)
                    line_push_button.clicked.connect(self.clicked)

                    line_push_button.setObjectName(line_text.text())
                    item_layout = QHBoxLayout()
                    item_layout.addWidget(line_text)
                    item_layout.addWidget(line_push_button)
                    item_widget.setLayout(item_layout)
                    item.setSizeHint(item_widget.sizeHint())
                    self.ListWidget.addItem(item)
                    self.ListWidget.setItemWidget(item, item_widget)

            except EOFError:
                self.favouriteS = []




class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        uic.loadUi('SUPER2randomanime.ui', self)
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(858, 509)
        MainWindow.setWindowTitle("RandomAnime")
        f = open('favourite.txt', 'a')
        f.close()
        self.Dialogue = Window(self)


        self.poster.setScaledContents(True)
        self.label_title.setWordWrap(True)
        self.label_va.setWordWrap(True)

        MainWindow.setCentralWidget(self.centralwidget)

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.frame_5 = QtWidgets.QFrame(self.tab_2)
        self.frame_5.setGeometry(QtCore.QRect(690, 90, 371, 561))
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.frame_5)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_title_3 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_title_3.setFont(font)
        self.label_title_3.setObjectName("film_title_3")
        self.gridLayout_5.addWidget(self.label_title_3, 1, 1, 1, 1)
        self.label_count_3 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_count_3.setFont(font)
        self.label_count_3.setObjectName("film_duration_3")
        self.gridLayout_5.addWidget(self.label_count_3, 5, 1, 1, 1)
        self.label_genre_3 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_genre_3.setFont(font)
        self.label_genre_3.setObjectName("film_genre_3")
        self.gridLayout_5.addWidget(self.label_genre_3, 4, 1, 1, 1)

        self.label_va_3 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_va_3.setFont(font)
        self.label_va_3.setObjectName("film_actors_3")
        self.gridLayout_5.addWidget(self.label_va_3, 6, 1, 1, 1)

        self.label_year_3 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_year_3.setFont(font)
        self.label_year_3.setObjectName("film_year_3")
        self.gridLayout_5.addWidget(self.label_year_3, 2, 1, 1, 1)
        self.frame_6 = QtWidgets.QFrame(self.tab_2)
        self.frame_6.setGeometry(QtCore.QRect(20, 90, 361, 561))
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.frame_6)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.listWidget = QtWidgets.QListWidget(self.frame_6)
        self.listWidget.setObjectName("listWidget")




        self.findbutton.clicked.connect(self.functions)
        self.sender = QNetworkAccessManager()
        self.sender.finished.connect(self.setImg)

        self.senderFavor = QNetworkAccessManager()
        self.senderFavor.finished.connect(self.setImg)

        self.addbutton.clicked.connect(self.favourite)
        self.gotofavouriteButton.clicked.connect(self.newWin)

        self.favouriteS = []
        self.lastanime = {}

        with open('favourite.txt', 'rb') as h:
            try:
                self.favouriteS = pickle.loads(h.read())
                for i in self.favouriteS:
                    self.listWidget.addItem(i['title'] + ' ' + str(i['year']) + ' ' + str(i['material_data']['all_genres'][0:3]).replace("[", "").replace("]", ""))

            except EOFError:
                self.favouriteS = []


    def newWin(self):
        self.Dialogue.exec()


    def functions(self):
        global showFavAnime
        url = 'https://anime777.ru/api/rand'
        response = requests.get(url)
        choise = {"genre": self.genre.currentText(),
                  "year": self.year.text(),
                  "episodes_total": self.count.text()}
        response.raise_for_status()
        try:
            response = requests.get(url, params=choise)
            json = response.json()
        except:
            pass

        try:
            self.label_title.setText(response.json()['title'])
            self.label_year.setText(str(response.json()['year']))
            self.label_va.setText(response.json()['translate'])
            self.label_count.setText(str(response.json()['material_data']['episodes_total']))
            self.label_genre.setText(str(response.json()['material_data']['all_genres'][0:3]).replace("[", "").replace("]", "").replace("'",""))
            self.label_story.setText(response.json()['material_data']['description'])

            urlImg = str(response.json()['material_data']["poster_url"])
            self.sender.get(QNetworkRequest(QUrl(urlImg)))
            self.lastanime = response.json()
        except:
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(True)
            self.poster.setFont(font)
            self.poster.setStyleSheet("color: rgb(170, 0, 0);\n"
                                      "border-color: rgb(85, 170, 255);")
            self.poster.setText("Мы не нашли\nничего \n"
                                "похожего :(")

    def setImg(self, reply):
        img = QPixmap()
        img.loadFromData(reply.readAll())
        self.poster.setPixmap(img)

    def favourite(self):
        if self.lastanime != {}:
            if self.lastanime not in self.favouriteS:
                with open('favourite.txt', 'wb') as f:
                    self.favouriteS.append(self.lastanime)
                    pickle.dump(self.favouriteS, f)
                self.listWidget.addItem(self.lastanime['title'] + ' ' + str(self.lastanime['year']) + ' ' + str(self.lastanime['material_data']['all_genres'][0:3]).replace("[", "").replace("]", ""))
                item = QListWidgetItem()
                item_widget = QWidget()
                line_text = QLabel(
                    self.lastanime['title'] + ' ' + str(self.lastanime['year']) + ' ' + str(self.lastanime['material_data']['all_genres'][0:3]).replace(
                        "[", "").replace("]", "").replace("'", ""))
                line_push_button = QPushButton("Показать")
                line_push_button.setFixedSize(100, 30)
                line_push_button.clicked.connect(self.Dialogue.clicked)

                line_push_button.setObjectName(line_text.text())
                item_layout = QHBoxLayout()
                item_layout.addWidget(line_text)
                item_layout.addWidget(line_push_button)
                item_widget.setLayout(item_layout)
                item.setSizeHint(item_widget.sizeHint())
                self.Dialogue.ListWidget.addItem(item)
                self.Dialogue.ListWidget.setItemWidget(item, item_widget)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
